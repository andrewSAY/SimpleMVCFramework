<?php

namespace LW\Model\Repository;

use Doctrine\ORM\EntityRepository;
use LW\Model\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function isUniqueUser($field, $id = 0, $value)
    {
        $usersCount = $this->createQueryBuilder('q')
            ->select('count(u.id) as c')
            ->from('LW\Model\Entity\User', 'u')
            ->where('u.' . $field . '=?1 and u.id <> ?2')
            ->setParameter(1, $value)
            ->setParameter(2, $id)
            ->getQuery()
            ->execute();

        if ($usersCount[0]['c'] > 0)
        {
            return false;
        }
        return true;
    }

    public function getAllUsers($onlyActive = false, $withOutGroups = false, $filterId = array(), $fields = array())
    {
        if (count($fields) == 0)
        {
            $fields = array(
                'id as id',
                'username as name',
                'role as role',
                'isActive as active'
            );
        }
        /**
         * @var $entity User
         */
        $usersAndLinks = $this->getUsersAndLinks($onlyActive, $withOutGroups, $filterId, $fields);
        $usersSelected = $usersAndLinks['users'];
        $links = $usersAndLinks['links'];

        foreach ($usersSelected as $key => $userSelected)
        {
            if (isset($userSelected['role']))
            {
                $usersSelected[$key]['role'] = User::getRoleList()[$userSelected['role']];
            }
            $usersSelected[$key]['groups'] = array();
        }

        if (!$withOutGroups)
        {
            foreach ($links as $link)
            {
                if ($withOutGroups && count($link['uId']) > 0)
                {
                    continue;
                }
                foreach ($usersSelected as $key => $value)
                {
                    if ($link['uId'] == $value['id'])
                    {
                        $usersSelected[$key]['groups'][] = $link['gId'];
                    }
                }
            }
        }

        return $usersSelected;
    }


    private function getUsersAndLinks($onlyActive, $withOutGroups, $filterId, $fields)
    {
        $fields = $this->setAlias($fields, 'u.');
        $stringSelect = implode(',', $fields);
        $usersSelected = $this->getEntityManager()->createQueryBuilder()
            ->select($stringSelect)
            ->from('LW\Model\Entity\User', 'u')
            ->addOrderBy('u.role', 'ASC')
            ->addOrderBy('u.username', 'ASC');

        if ($onlyActive)
        {
            $usersSelected->andWhere('u.isActive = 1');
        }
        if (count($filterId) > 0)
        {
            foreach ($filterId as $key => $value)
            {
                $usersSelected->orWhere('u.id = ?' . $key);
            }
        }

        $usersSelected = $usersSelected->getQuery();
        $usersSelected = $usersSelected->execute($filterId);

        $links = array();

        if (!$withOutGroups)
        {
            $links = $this->getEntityManager()->createQueryBuilder()
                ->select('l.groupId as gId, l.userId as uId')
                ->from('LW\Model\Entity\Link ', 'l')
                ->addOrderBy('uId', 'ASC')
                ->getQuery()->execute();
        }

        return array('users' => $usersSelected, 'links' => $links);
    }

    private function setAlias($fields, $alias)
    {
        foreach ($fields as $key => $value)
        {
            $fields[$key] = $alias . $value;
        }

        return $fields;
    }
}
